name: Pull Request Test Handler

on:
  repository_dispatch:
    types:
      - test-command

jobs:
  azure_standalone_external:
    uses: ./.github/workflows/azure-tests.yml
    secrets: inherit
    name: Run tf-test on Azure Standalone External
    if: ${{ contains(github.event.client_payload.slash_command.args.unnamed.all, 'all') || contains(github.event.client_payload.slash_command.args.unnamed.all, 'azure-standalone-external') || contains(github.event.client_payload.slash_command.args.unnamed.all, 'full-azure') }}
    with:
      test_name: Standalone External
      module_repository_id: hashicorp/terraform-azurerm-terraform-enterprise
      work_dir: ./tests/standalone-external
      k6_work_dir: ./tests/tfe-load-test
      utility_test: true
      pull_request_repo_name: ${{ github.event.client_payload.github.payload.repository.full_name }}
      pull_request_ref: ${{ github.event.client_payload.pull_request.head.sha }}
      pull_request_comment_id: ${{ github.event.client_payload.github.payload.comment.id }}
      TFC_token_secret_name: UTILITY_AZURE_STANDALONE_EXTERNAL_TFC_TOKEN
      TFC_workspace_substitution_pattern: 's/terraform {/terraform {\n\
        backend "remote" {\n\
          organization = "terraform-enterprise-modules-test"\n\
          workspaces {\n\
            name = "utility-azure-standalone-external"\n\
          }\n\
        }\n/'
  azure_standalone_mounted_disk:
    uses: ./.github/workflows/azure-tests.yml
    secrets: inherit
    name: Run tf-test on Azure Standalone Mounted Disk
    if: ${{ contains(github.event.client_payload.slash_command.args.unnamed.all, 'all') || contains(github.event.client_payload.slash_command.args.unnamed.all, 'azure-standalone-mounted-disk') || contains(github.event.client_payload.slash_command.args.unnamed.all, 'full-azure') }}
    with:
      test_name: Standalone Mounted Disk
      module_repository_id: hashicorp/terraform-azurerm-terraform-enterprise
      work_dir: ./tests/standalone-mounted-disk
      k6_work_dir: ./tests/tfe-load-test
      utility_test: true
      pull_request_repo_name: ${{ github.event.client_payload.github.payload.repository.full_name }}
      pull_request_ref: ${{ github.event.client_payload.pull_request.head.sha }}
      pull_request_comment_id: ${{ github.event.client_payload.github.payload.comment.id }}
      TFC_token_secret_name: UTILITY_AZURE_STANDALONE_MOUNTED_DISK_TFC_TOKEN
      TFC_workspace_substitution_pattern: 's/terraform {/terraform {\n\
        backend "remote" {\n\
          organization = "terraform-enterprise-modules-test"\n\
          workspaces {\n\
            name = "utility-azure-standalone-mounted-disk"\n\
          }\n\
        }\n/'
  azure_public_active_active:
    uses: ./.github/workflows/azure-tests.yml
    secrets: inherit
    name: Run tf-test on Azure Public Active/Active
    if: ${{ contains(github.event.client_payload.slash_command.args.unnamed.all, 'all') || contains(github.event.client_payload.slash_command.args.unnamed.all, 'azure-public-active-active') || contains(github.event.client_payload.slash_command.args.unnamed.all, 'full-azure') }}
    with:
      test_name: Public Active/Active
      module_repository_id: hashicorp/terraform-azurerm-terraform-enterprise
      work_dir: ./tests/public-active-active
      k6_work_dir: ./tests/tfe-load-test
      utility_test: true
      pull_request_repo_name: ${{ github.event.client_payload.github.payload.repository.full_name }}
      pull_request_ref: ${{ github.event.client_payload.pull_request.head.sha }}
      pull_request_comment_id: ${{ github.event.client_payload.github.payload.comment.id }}
      TFC_token_secret_name: UTILITY_AZURE_PUBLIC_ACTIVE_ACTIVE_TFC_TOKEN
      TFC_workspace_substitution_pattern: s/azure-public-active-active/utility-azure-public-active-active/
  
  azure_private_active_active:
    uses: ./.github/workflows/azure-tests.yml
    secrets: inherit
    name: Run tf-test on Azure Private Active/Active
    if: ${{ contains(github.event.client_payload.slash_command.args.unnamed.all, 'all') || contains(github.event.client_payload.slash_command.args.unnamed.all, 'azure-private-active-active') || contains(github.event.client_payload.slash_command.args.unnamed.all, 'full-azure') }}
    with:
      test_name: Private Active/Active
      utility_test: true
      module_repository_id: hashicorp/terraform-azurerm-terraform-enterprise
      work_dir: ./tests/private-active-active
      k6_work_dir: ./tests/tfe-load-test
      pull_request_repo_name: ${{ github.event.client_payload.github.payload.repository.full_name }}
      pull_request_ref: ${{ github.event.client_payload.pull_request.head.sha }}
      pull_request_comment_id: ${{ github.event.client_payload.github.payload.comment.id }}
      TFC_token_secret_name: UTILITY_AZURE_PRIVATE_ACTIVE_ACTIVE_TFC_TOKEN
      TFC_workspace_substitution_pattern: s/azure-private-active-active/utility-azure-private-active-active/
      bastion_ssh_private_key_secret_name: AZURE_PRIVATE_ACTIVE_ACTIVE_BASTION_SSH_KEY_BASE64

  azure_private_tcp_active_active:
    uses: ./.github/workflows/azure-tests.yml
    secrets: inherit
    name: Run tf-test on Azure Private TCP Active/Active
    if: ${{ contains(github.event.client_payload.slash_command.args.unnamed.all, 'all') || contains(github.event.client_payload.slash_command.args.unnamed.all, 'azure-private-tcp-active-active') || contains(github.event.client_payload.slash_command.args.unnamed.all, 'full-azure') }}
    with:
      test_name: Private TCP Active/Active
      utility_test: true
      module_repository_id: hashicorp/terraform-azurerm-terraform-enterprise
      work_dir: ./tests/private-tcp-active-active
      k6_work_dir: ./tests/tfe-load-test
      pull_request_repo_name: ${{ github.event.client_payload.github.payload.repository.full_name }}
      pull_request_ref: ${{ github.event.client_payload.pull_request.head.sha }}
      pull_request_comment_id: ${{ github.event.client_payload.github.payload.comment.id }}
      TFC_token_secret_name: UTILITY_AZURE_PRIVATE_TCP_ACTIVE_ACTIVE_TFC_TOKEN
      TFC_workspace_substitution_pattern: s/azure-private-tcp-active-active/utility-azure-private-tcp-active-active/
      bastion_ssh_private_key_secret_name: AZURE_PRIVATE_TCP_ACTIVE_ACTIVE_BASTION_SSH_KEY_BASE64

  google_public_active_active:
    uses: ./.github/workflows/google-tests.yml
    secrets: inherit
    name: Run tf-test on Google Public Active/Active
    if: ${{ contains(github.event.client_payload.slash_command.args.unnamed.all, 'all') || contains(github.event.client_payload.slash_command.args.unnamed.all, 'google-public-active-active') || contains(github.event.client_payload.slash_command.args.unnamed.all, 'full-google') }}
    with:
      test_name: Google Public Active/Active
      module_repository_id: hashicorp/terraform-google-terraform-enterprise
      work_dir: ./tests/public-active-active
      k6_work_dir: ./tests/tfe-load-test
      utility_test: true
      enable_iact_subnet_list: true
      private_test: false
      create_backend: true
      pull_request_repo_name: ${{ github.event.client_payload.github.payload.repository.full_name }}
      pull_request_ref: ${{ github.event.client_payload.pull_request.head.sha }}
      pull_request_comment_id: ${{ github.event.client_payload.github.payload.comment.id }}
      TFC_token_secret_name: UTILITY_GOOGLE_PUBLIC_ACTIVE_ACTIVE_TFC_TOKEN
      TFC_workspace_substitution_pattern: s/google-public-active-active/utility-google-public-active-active/
      TFC_workspace: utility-google-public-active-active
  
  google_private_active_active:
    uses: ./.github/workflows/google-tests.yml
    secrets: inherit
    name: Run tf-test on Google Private Active/Active
    if: ${{ contains(github.event.client_payload.slash_command.args.unnamed.all, 'all') || contains(github.event.client_payload.slash_command.args.unnamed.all, 'google-private-active-active') || contains(github.event.client_payload.slash_command.args.unnamed.all, 'full-google') }}
    with:
      test_name: Google Private Active/Active
      utility_test: true
      create_backend: true
      enable_iact_subnet_list: false
      module_repository_id: hashicorp/terraform-google-terraform-enterprise
      work_dir: ./tests/private-active-active
      k6_work_dir: ./tests/tfe-load-test
      pull_request_repo_name: ${{ github.event.client_payload.github.payload.repository.full_name }}
      pull_request_ref: ${{ github.event.client_payload.pull_request.head.sha }}
      pull_request_comment_id: ${{ github.event.client_payload.github.payload.comment.id }}
      TFC_token_secret_name: UTILITY_GOOGLE_PRIVATE_ACTIVE_ACTIVE_TFC_TOKEN
      TFC_workspace_substitution_pattern: s/google-private-active-active/utility-google-private-active-active/
      TFC_workspace: utility-google-private-active-active
      private_test: true

  google_private_tcp_active_active:
    uses: ./.github/workflows/google-tests.yml
    secrets: inherit
    name: Run tf-test on Google Private TCP Active/Active
    if: ${{ contains(github.event.client_payload.slash_command.args.unnamed.all, 'all') || contains(github.event.client_payload.slash_command.args.unnamed.all, 'google-private-tcp-active-active') || contains(github.event.client_payload.slash_command.args.unnamed.all, 'full-google') }}
    with:
      test_name: Google Private TCP Active/Active
      utility_test: true
      create_backend: true
      enable_iact_subnet_list: false
      module_repository_id: hashicorp/terraform-google-terraform-enterprise
      work_dir: ./tests/private-tcp-active-active
      k6_work_dir: ./tests/tfe-load-test
      pull_request_repo_name: ${{ github.event.client_payload.github.payload.repository.full_name }}
      pull_request_ref: ${{ github.event.client_payload.pull_request.head.sha }}
      pull_request_comment_id: ${{ github.event.client_payload.github.payload.comment.id }}
      TFC_token_secret_name: UTILITY_GOOGLE_PRIVATE_TCP_ACTIVE_ACTIVE_TFC_TOKEN
      TFC_workspace_substitution_pattern: s/google-private-tcp-active-active/utility-google-private-tcp-active-active/
      TFC_workspace: utility-google-private-tcp-active-active
      private_test: true

  google_standalone_external_rhel8_worker:
    uses: ./.github/workflows/google-tests.yml
    secrets: inherit
    name: Run tf-test on Google Standalone External Rhel8 Worker
    if: ${{ contains(github.event.client_payload.slash_command.args.unnamed.all, 'all') || contains(github.event.client_payload.slash_command.args.unnamed.all, 'standalone-external-rhel8-worker') || contains(github.event.client_payload.slash_command.args.unnamed.all, 'full-google') }}
    with:
      test_name: Google Standalone External Rhel8 Worker
      module_repository_id: hashicorp/terraform-google-terraform-enterprise
      work_dir: ./tests/standalone-external-rhel8-worker
      k6_work_dir: ./tests/tfe-load-test
      private_test: false
      utility_test: true
      create_backend: true
      enable_iact_subnet_list: false
      pull_request_repo_name: ${{ github.event.client_payload.github.payload.repository.full_name }}
      pull_request_ref: ${{ github.event.client_payload.pull_request.head.sha }}
      pull_request_comment_id: ${{ github.event.client_payload.github.payload.comment.id }}
      TFC_token_secret_name: UTILITY_STANDALONE_EXTERNAL_RHEL8_WORKER_TFC_TOKEN
      TFC_workspace_substitution_pattern: s/google-standalone-external-rhel8-worker/utility-google-standalone-external-rhel8-worker/
      TFC_workspace: utility-google-standalone-external-rhel8-worker

  google_standalone_mounted_disk:
    uses: ./.github/workflows/google-tests.yml
    secrets: inherit
    name: Run tf-test on Google Standalone Mounted Disk
    if: ${{ contains(github.event.client_payload.slash_command.args.unnamed.all, 'all') || contains(github.event.client_payload.slash_command.args.unnamed.all, 'google-standalone-mounted-disk') || contains(github.event.client_payload.slash_command.args.unnamed.all, 'full-google') }}
    with:
      test_name: Google Standalone Mounted Disk
      module_repository_id: hashicorp/terraform-google-terraform-enterprise
      work_dir: ./tests/standalone-mounted-disk
      k6_work_dir: ./tests/tfe-load-test
      utility_test: true
      create_backend: true
      private_test: false
      enable_iact_subnet_list: false
      pull_request_repo_name: ${{ github.event.client_payload.github.payload.repository.full_name }}
      pull_request_ref: ${{ github.event.client_payload.pull_request.head.sha }}
      pull_request_comment_id: ${{ github.event.client_payload.github.payload.comment.id }}
      TFC_token_secret_name: UTILITY_GOOGLE_STANDALONE_MOUNTED_DISK_TFC_TOKEN
      TFC_workspace_substitution_pattern: s/google-standalone-mounted-disk/utility-google-standalone-mounted-disk/
      TFC_workspace: utility-google-standalone-mounted-disk

  aws_active_active_rhel7_proxy:
    name: Run tf-test on AWS Active-Active RHEL7 Proxy
    if: ${{ contains(github.event.client_payload.slash_command.args.unnamed.all, 'all') || contains(github.event.client_payload.slash_command.args.unnamed.all, 'aws-active-active-rhel7-proxy') || contains(github.event.client_payload.slash_command.args.unnamed.all, 'full-aws')}}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    env:
      WORK_DIR_PATH: ./tests/active-active-rhel7-proxy
      K6_WORK_DIR_PATH: ./tests/tfe-load-test
      AWS_DEFAULT_REGION: us-east-2
    steps:
      - name: Create URL to the run output
        id: vars
        run: echo ::set-output name=run-url::https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID

      # Checkout the branch of the AWS TFE module to be used to test changes
      - name: Checkout
        uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.5.2
        with:
          repository: hashicorp/terraform-aws-terraform-enterprise

      - name: Set Terraform Backend to TFC Workspace
        working-directory: ${{ env.WORK_DIR_PATH }}
        run: |
          sed --in-place 's/terraform {/terraform {\n\
            backend "remote" {\n\
              organization = "terraform-enterprise-modules-test"\n\
              workspaces {\n\
                name = "utility-aws-active-active-rhel7-proxy"\n\
              }\n\
            }\n/' versions.tf

      - name: Set Terraform Utility Module Sources
        working-directory: ${{ env.WORK_DIR_PATH }}
        env:
          SHA: ${{ github.event.client_payload.pull_request.head.sha }}
        run: |
          sed --in-place "s/?ref=main/?ref=$SHA/" ../../main.tf
          sed --in-place "s/?ref=main/?ref=$SHA/" ../../fixtures/test_proxy/main.tf

      # Checkout the hashicorp/tfe-load-test repository
      - name: Checkout TFE Load Test
        uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.5.2
        with:
          path: ${{ env.K6_WORK_DIR_PATH }}
          repository: hashicorp/tfe-load-test
          token: ${{ secrets.GH_TFE_LOAD_TEST_TOKEN }}
          persist-credentials: false

      - name: Install required tools
        working-directory: ${{ env.K6_WORK_DIR_PATH }}
        env:
          K6_URL: https://github.com/loadimpact/k6/releases/download/v0.31.1/k6-v0.31.1-linux64.tar.gz
        run: |
          sudo apt-get install jq
          curl -L $K6_URL | tar -xz --strip-components=1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_hostname: 'app.terraform.io'
          cli_config_credentials_token: ${{ secrets.UTILITY_AWS_ACTIVE_ACTIVE_RHEL7_PROXY_TFC_TOKEN }}
          terraform_version: 1.1.5
          terraform_wrapper: true

      # Run Terraform commands between these comments vvv

      - name: Terraform Init
        id: init
        working-directory: ${{ env.WORK_DIR_PATH }}
        run: terraform init -input=false -no-color

      - name: Terraform Validate
        id: validate
        working-directory: ${{ env.WORK_DIR_PATH }}
        run: terraform validate -no-color

      - name: Terraform Apply
        id: apply
        working-directory: ${{ env.WORK_DIR_PATH }}
        run: terraform apply -auto-approve -input=false -no-color

      - name: Retrieve Health Check URL
        id: retrieve-health-check-url
        working-directory: ${{ env.WORK_DIR_PATH }}
        run: |
          terraform output -no-color -raw ptfe_health_check

      - name: Retrieve Instance ID
        id: retrieve-instance-id
        working-directory: ${{ env.WORK_DIR_PATH }}
        run: |
          terraform output -no-color -raw proxy_instance_id

      - name: Write Private SSH Key
        env:
          SSH_KEY_BASE64: ${{ secrets.AWS_ACTIVE_ACTIVE_RHEL7_PROXY_SSH_KEY_BASE64 }}
        run: |
          echo "$SSH_KEY_BASE64" | base64 --decode > ./ssh-key.pem
          chmod 0400 ./ssh-key.pem

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@e1e17a757e536f70e52b5a12b2e8d1d1c60e04ef # v2.0.0
        with:
          aws-access-key-id: ${{ secrets.AWS_ACTIVE_ACTIVE_RHEL7_PROXY_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_ACTIVE_ACTIVE_RHEL7_PROXY_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2
          role-to-assume: ${{ secrets.AWS_ACTIVE_ACTIVE_RHEL7_PROXY_AWS_ROLE_TO_ASSUME }}
          role-duration-seconds: 2400
          role-skip-session-tagging: true

      - name: Start SOCKS5 Proxy
        env:
          INSTANCE_ID: ${{ steps.retrieve-instance-id.outputs.stdout }}
        run: |
          aws ec2 wait instance-status-ok --instance-ids "$INSTANCE_ID"
          ssh \
            -o 'BatchMode yes' \
            -o 'StrictHostKeyChecking accept-new' \
            -o 'ProxyCommand sh -c \
              "aws ssm start-session \
                --target %h \
                --document-name AWS-StartSSHSession \
                --parameters \"portNumber=%p\""' \
            -i ./ssh-key.pem \
            -f -N -p 22 -D localhost:5000 \
            ubuntu@"$INSTANCE_ID"

      - name: Wait For TFE
        id: wait-for-tfe
        timeout-minutes: 15
        env:
          HEALTH_CHECK_URL: ${{ steps.retrieve-health-check-url.outputs.stdout }}
        run: |
          echo "Curling \`health_check_url\` for a return status of 200..."
          while ! curl \
            -sfS --max-time 5 \
            --proxy socks5://localhost:5000 \
            $HEALTH_CHECK_URL; \
            do sleep 5; done

      - name: Retrieve TFE URL
        id: retrieve-tfe-url
        working-directory: ${{ env.WORK_DIR_PATH }}
        run: |
          terraform output -no-color -raw ptfe_endpoint

      - name: Retrieve IACT
        id: retrieve-iact
        env:
          IACT_URL: "${{ steps.retrieve-tfe-url.outputs.stdout }}/admin/retrieve-iact"
        run: |
          token=$(curl --fail --retry 5 --verbose --proxy socks5://localhost:5000 "$IACT_URL")
          echo "::set-output name=token::$token"

      - name: Create Admin in TFE
        id: create-admin
        env:
          TFE_PASSWORD: ${{ secrets.TFE_PASSWORD }}
          IAU_URL: "${{ steps.retrieve-tfe-url.outputs.stdout }}/admin/initial-admin-user"
          IACT: ${{ steps.retrieve-iact.outputs.token }}
        run: |
          echo \
            '{"username": "test", "email": "team-tf-enterprise@hashicorp.com", "password": "$TFE_PASSWORD"}' \
            > ./payload.json
          response=$( \
            curl \
            --fail \
            --retry 5 \
            --verbose \
            --header 'Content-Type: application/json' \
            --data @./payload.json \
            --proxy socks5://localhost:5000 \
            "$IAU_URL"?token="$IACT")
          echo "::set-output name=response::$response"

      - name: Retrieve Admin Token
        id: retrieve-admin-token
        env:
          RESPONSE: ${{ steps.create-admin.outputs.response }}
        run: |
          token=$(echo "$RESPONSE" | jq --raw-output '.token')
          echo "::set-output name=token::$token"

      - name: Run k6 Smoke Test
        id: run-smoke-test
        working-directory: ${{ env.K6_WORK_DIR_PATH }}
        env:
          K6_PATHNAME: "./k6"
          TFE_URL: "${{ steps.retrieve-tfe-url.outputs.stdout }}"
          TFE_API_TOKEN: "${{ steps.retrieve-admin-token.outputs.token }}"
          TFE_EMAIL: team-tf-enterprise@hashicorp.com
          http_proxy: socks5://localhost:5000/
          https_proxy: socks5://localhost:5000/
        run: |
          make smoke-test

      - name: Terraform Destroy
        id: destroy
        if: ${{ always() && github.event.client_payload.slash_command.args.named.destroy != 'false' }}
        working-directory: ${{ env.WORK_DIR_PATH }}
        run: terraform destroy -auto-approve -input=false -no-color

      # Run Terraform commands between these comments ^^^

      - name: Update comment
        if: ${{ always() }}
        uses: peter-evans/create-or-update-comment@3383acd359705b10cb1eeef05c0e88c056ea4666 # v3.0.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.event.client_payload.github.payload.repository.full_name }}
          comment-id: ${{ github.event.client_payload.github.payload.comment.id }}
          body: |
            ${{ format('### {0} Terraform AWS Active-Active RHEL7 Proxy Test Report', job.status == 'success' && ':white_check_mark:' || ':x:') }}

            ${{ format(':link: [Action Summary Page]({0})', steps.vars.outputs.run-url) }}

            ${{ format('- {0} Terraform Init', steps.init.outcome == 'success' && ':white_check_mark:' || ':x:') }}

            ${{ format('- {0} Terraform Validate', steps.validate.outcome == 'success' && ':white_check_mark:' || ':x:') }}

            ${{ format('- {0} Terraform Apply', steps.apply.outcome == 'success' && ':white_check_mark:' || ':x:') }}

            ${{ format('- {0} Run k6 Smoke Test', steps.run-smoke-test.outcome == 'success' && ':white_check_mark:' || ':x:') }}

            ${{ github.event.client_payload.slash_command.args.named.destroy != 'false' && format('- {0} Terraform Destroy', steps.destroy.outcome == 'success' && ':white_check_mark:' || ':x:') || '' }}

  aws_private_active_active:
    name: Run tf-test on AWS Private Active-Active
    if: ${{ contains(github.event.client_payload.slash_command.args.unnamed.all, 'all') || contains(github.event.client_payload.slash_command.args.unnamed.all, 'aws-private-active-active') || contains(github.event.client_payload.slash_command.args.unnamed.all, 'full-aws')}}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    env:
      WORK_DIR_PATH: ./tests/private-active-active
      K6_WORK_DIR_PATH: ./tests/tfe-load-test
      AWS_DEFAULT_REGION: us-east-2
    steps:
      - name: Create URL to the run output
        id: vars
        run: echo ::set-output name=run-url::https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID

      # Checkout the branch of the AWS TFE module to be used to test changes
      - name: Checkout
        uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.5.2
        with:
          repository: hashicorp/terraform-aws-terraform-enterprise

      - name: Update Terraform Backend to TFC Workspace for Utility Module
        working-directory: ${{ env.WORK_DIR_PATH }}
        run: |
          sed --in-place 's/aws-private-active-active/utility-aws-private-active-active/' versions.tf

      - name: Set Terraform Utility Module Sources
        working-directory: ${{ env.WORK_DIR_PATH }}
        env:
          SHA: ${{ github.event.client_payload.pull_request.head.sha }}
        run: |
          sed --in-place "s/?ref=main/?ref=$SHA/" ../../main.tf
          sed --in-place "s/?ref=main/?ref=$SHA/" ../../fixtures/test_proxy/main.tf

      # Checkout the hashicorp/tfe-load-test repository
      - name: Checkout TFE Load Test
        uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.5.2
        with:
          path: ${{ env.K6_WORK_DIR_PATH }}
          repository: hashicorp/tfe-load-test
          token: ${{ secrets.GH_TFE_LOAD_TEST_TOKEN }}
          persist-credentials: false

      - name: Install required tools
        working-directory: ${{ env.K6_WORK_DIR_PATH }}
        env:
          K6_URL: https://github.com/loadimpact/k6/releases/download/v0.31.1/k6-v0.31.1-linux64.tar.gz
        run: |
          sudo apt-get install jq
          curl -L $K6_URL | tar -xz --strip-components=1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_hostname: 'app.terraform.io'
          cli_config_credentials_token: ${{ secrets.UTILITY_AWS_PRIVATE_ACTIVE_ACTIVE_TFC_TOKEN }}
          terraform_version: 1.1.5
          terraform_wrapper: true

      # Run Terraform commands between these comments vvv

      - name: Terraform Init
        id: init
        working-directory: ${{ env.WORK_DIR_PATH }}
        run: terraform init -input=false -no-color

      - name: Terraform Validate
        id: validate
        working-directory: ${{ env.WORK_DIR_PATH }}
        run: terraform validate -no-color

      - name: Terraform Apply
        id: apply
        working-directory: ${{ env.WORK_DIR_PATH }}
        run: terraform apply -auto-approve -input=false -no-color

      - name: Retrieve Health Check URL
        id: retrieve-health-check-url
        working-directory: ${{ env.WORK_DIR_PATH }}
        run: |
          terraform output -no-color -raw health_check_url

      - name: Retrieve Instance ID
        id: retrieve-instance-id
        working-directory: ${{ env.WORK_DIR_PATH }}
        run: |
          terraform output -no-color -raw proxy_instance_id

      - name: Write Private SSH Key
        env:
          SSH_KEY_BASE64: ${{ secrets.AWS_PRIVATE_ACTIVE_ACTIVE_SSH_KEY_BASE64 }}
        run: |
          echo "$SSH_KEY_BASE64" | base64 --decode > ./ssh-key.pem
          chmod 0400 ./ssh-key.pem

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@e1e17a757e536f70e52b5a12b2e8d1d1c60e04ef # v2.0.0
        with:
          aws-access-key-id: ${{ secrets.AWS_PRIVATE_ACTIVE_ACTIVE_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_PRIVATE_ACTIVE_ACTIVE_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2
          role-to-assume: ${{ secrets.AWS_PRIVATE_ACTIVE_ACTIVE_AWS_ROLE_TO_ASSUME }}
          role-duration-seconds: 2400
          role-skip-session-tagging: true

      - name: Start SOCKS5 Proxy
        env:
          INSTANCE_ID: ${{ steps.retrieve-instance-id.outputs.stdout }}
        run: |
          aws ec2 wait instance-status-ok --instance-ids "$INSTANCE_ID"
          ssh \
            -o 'BatchMode yes' \
            -o 'StrictHostKeyChecking accept-new' \
            -o 'ProxyCommand sh -c \
              "aws ssm start-session \
                --target %h \
                --document-name AWS-StartSSHSession \
                --parameters \"portNumber=%p\""' \
            -i ./ssh-key.pem \
            -f -N -p 22 -D localhost:5000 \
            ubuntu@"$INSTANCE_ID"

      - name: Wait For TFE
        id: wait-for-tfe
        timeout-minutes: 15
        env:
          HEALTH_CHECK_URL: ${{ steps.retrieve-health-check-url.outputs.stdout }}
        run: |
          echo "Curling \`health_check_url\` for a return status of 200..."
          while ! curl \
            -sfS --max-time 5 --proxy socks5://localhost:5000 \
            $HEALTH_CHECK_URL; \
            do sleep 5; done

      - name: Retrieve TFE URL
        id: retrieve-tfe-url
        working-directory: ${{ env.WORK_DIR_PATH }}
        run: |
          terraform output -no-color -raw tfe_url

      - name: Retrieve IACT URL
        id: retrieve-iact-url
        working-directory: ${{ env.WORK_DIR_PATH }}
        run: |
          terraform output -no-color -raw iact_url

      - name: Retrieve IACT
        id: retrieve-iact
        env:
          IACT_URL: ${{ steps.retrieve-iact-url.outputs.stdout }}
        run: |
          token=$(curl --fail --retry 5 --verbose --proxy socks5://localhost:5000 "$IACT_URL")
          echo "::set-output name=token::$token"

      - name: Retrieve Initial Admin User URL
        id: retrieve-initial-admin-user-url
        working-directory: ${{ env.WORK_DIR_PATH }}
        run: |
          terraform output -no-color -raw initial_admin_user_url

      - name: Create Admin in TFE
        id: create-admin
        env:
          TFE_PASSWORD: ${{ secrets.TFE_PASSWORD }}
          IAU_URL: ${{ steps.retrieve-initial-admin-user-url.outputs.stdout }}
          IACT_TOKEN: ${{ steps.retrieve-iact.outputs.token }}
        run: |
          echo \
            '{"username": "test", "email": "team-tf-enterprise@hashicorp.com", "password": "$TFE_PASSWORD"}' \
            > ./payload.json
          response=$( \
            curl \
            --fail \
            --retry 5 \
            --verbose \
            --header 'Content-Type: application/json' \
            --data @./payload.json \
            --proxy socks5://localhost:5000 \
            "$IAU_URL"?token="$IACT_TOKEN")
          echo "::set-output name=response::$response"

      - name: Retrieve Admin Token
        id: retrieve-admin-token
        env:
          RESPONSE: ${{ steps.create-admin.outputs.response }}
        run: |
          token=$(echo "$RESPONSE" | jq --raw-output '.token')
          echo "::set-output name=token::$token"

      - name: Run k6 Smoke Test
        id: run-smoke-test
        working-directory: ${{ env.K6_WORK_DIR_PATH }}
        env:
          K6_PATHNAME: "./k6"
          TFE_URL: "${{ steps.retrieve-tfe-url.outputs.stdout }}"
          TFE_API_TOKEN: "${{ steps.retrieve-admin-token.outputs.token }}"
          TFE_EMAIL: team-tf-enterprise@hashicorp.com
          http_proxy: socks5://localhost:5000/
          https_proxy: socks5://localhost:5000/
        run: |
          make smoke-test

      - name: Terraform Destroy
        id: destroy
        if: ${{ always() && github.event.client_payload.slash_command.args.named.destroy != 'false' }}
        working-directory: ${{ env.WORK_DIR_PATH }}
        run: terraform destroy -auto-approve -input=false -no-color

      # Run Terraform commands between these comments ^^^

      - name: Update comment
        if: ${{ always() }}
        uses: peter-evans/create-or-update-comment@3383acd359705b10cb1eeef05c0e88c056ea4666 # v3.0.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.event.client_payload.github.payload.repository.full_name }}
          comment-id: ${{ github.event.client_payload.github.payload.comment.id }}
          body: |
            ${{ format('### {0} Terraform AWS Private Active/Active Test Report', job.status == 'success' && ':white_check_mark:' || ':x:') }}

            ${{ format(':link: [Action Summary Page]({0})', steps.vars.outputs.run-url) }}

            ${{ format('- {0} Terraform Init', steps.init.outcome == 'success' && ':white_check_mark:' || ':x:') }}

            ${{ format('- {0} Terraform Validate', steps.validate.outcome == 'success' && ':white_check_mark:' || ':x:') }}

            ${{ format('- {0} Terraform Apply', steps.apply.outcome == 'success' && ':white_check_mark:' || ':x:') }}

            ${{ format('- {0} Run k6 Smoke Test', steps.run-smoke-test.outcome == 'success' && ':white_check_mark:' || ':x:') }}

            ${{ github.event.client_payload.slash_command.args.named.destroy != 'false' && format('- {0} Terraform Destroy', steps.destroy.outcome == 'success' && ':white_check_mark:' || ':x:') || '' }}

  aws_private_tcp_active_active:
    name: Run tf-test on AWS Private TCP Active/Active
    if: ${{ contains(github.event.client_payload.slash_command.args.unnamed.all, 'all') || contains(github.event.client_payload.slash_command.args.unnamed.all, 'aws-private-tcp-active-active') || contains(github.event.client_payload.slash_command.args.unnamed.all, 'full-aws')}}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    env:
      WORK_DIR_PATH: ./tests/private-tcp-active-active
      K6_WORK_DIR_PATH: ./tests/tfe-load-test
      AWS_DEFAULT_REGION: us-east-2
    steps:
      - name: Create URL to the run output
        id: vars
        run: echo ::set-output name=run-url::https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID

      # Checkout the branch of the AWS TFE module to be used to test changes
      - name: Checkout
        uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.5.2
        with:
          repository: hashicorp/terraform-aws-terraform-enterprise

      - name: Update Terraform Backend to TFC Workspace for Utility Module
        working-directory: ${{ env.WORK_DIR_PATH }}
        run: |
          sed --in-place 's/aws-private-tcp-active-active/utility-aws-private-tcp-active-active/' versions.tf 

      - name: Set Terraform Utility Module Sources
        working-directory: ${{ env.WORK_DIR_PATH }}
        env:
          SHA: ${{ github.event.client_payload.pull_request.head.sha }}
        run: |
          sed --in-place "s/?ref=main/?ref=$SHA/" ../../main.tf
          sed --in-place "s/?ref=main/?ref=$SHA/" ../../fixtures/test_proxy/main.tf

      # Checkout the hashicorp/tfe-load-test repository
      - name: Checkout TFE Load Test
        uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.5.2
        with:
          path: ${{ env.K6_WORK_DIR_PATH }}
          repository: hashicorp/tfe-load-test
          token: ${{ secrets.GH_TFE_LOAD_TEST_TOKEN }}
          persist-credentials: false

      - name: Install required tools
        working-directory: ${{ env.K6_WORK_DIR_PATH }}
        env:
          K6_URL: https://github.com/loadimpact/k6/releases/download/v0.31.1/k6-v0.31.1-linux64.tar.gz
        run: |
          sudo apt-get install jq
          curl -L $K6_URL | tar -xz --strip-components=1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_hostname: 'app.terraform.io'
          cli_config_credentials_token: ${{ secrets.UTILITY_AWS_PRIVATE_TCP_ACTIVE_ACTIVE_TFC_TOKEN }}
          terraform_version: 1.1.5
          terraform_wrapper: true

      # Run Terraform commands between these comments vvv

      - name: Terraform Init
        id: init
        working-directory: ${{ env.WORK_DIR_PATH }}
        run: terraform init -input=false -no-color

      - name: Terraform Validate
        id: validate
        working-directory: ${{ env.WORK_DIR_PATH }}
        run: terraform validate -no-color

      - name: Terraform Apply
        id: apply
        working-directory: ${{ env.WORK_DIR_PATH }}
        run: terraform apply -auto-approve -input=false -no-color

      - name: Retrieve Health Check URL
        id: retrieve-health-check-url
        working-directory: ${{ env.WORK_DIR_PATH }}
        run: |
          terraform output -no-color -raw health_check_url

      - name: Retrieve Instance ID
        id: retrieve-instance-id
        working-directory: ${{ env.WORK_DIR_PATH }}
        run: |
          terraform output -no-color -raw proxy_instance_id

      - name: Write Private TCP SSH Key
        env:
          SSH_KEY_BASE64: ${{ secrets.AWS_PRIVATE_TCP_ACTIVE_ACTIVE_SSH_KEY_BASE64 }}
        run: |
          echo "$SSH_KEY_BASE64" | base64 --decode > ./ssh-key.pem
          chmod 0400 ./ssh-key.pem

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@e1e17a757e536f70e52b5a12b2e8d1d1c60e04ef # v2.0.0
        with:
          aws-access-key-id: ${{ secrets.AWS_PRIVATE_TCP_ACTIVE_ACTIVE_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_PRIVATE_TCP_ACTIVE_ACTIVE_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2
          role-to-assume: ${{ secrets.AWS_PRIVATE_TCP_ACTIVE_ACTIVE_AWS_ROLE_TO_ASSUME }}
          role-duration-seconds: 2400
          role-skip-session-tagging: true

      - name: Start SOCKS5 Proxy
        env:
          INSTANCE_ID: ${{ steps.retrieve-instance-id.outputs.stdout }}
        run: |
          aws ec2 wait instance-status-ok --instance-ids "$INSTANCE_ID"
          ssh \
            -o 'BatchMode yes' \
            -o 'StrictHostKeyChecking accept-new' \
            -o 'ServerAliveInterval 5' \
            -o 'ServerAliveCountMax 3' \
            -o 'ProxyCommand sh -c \
              "aws ssm start-session \
                --target %h \
                --document-name AWS-StartSSHSession \
                --parameters \"portNumber=%p\""' \
            -i ./ssh-key.pem \
            -f -N -p 22 -D localhost:5000 \
            ubuntu@"$INSTANCE_ID"

      - name: Wait For TFE
        id: wait-for-tfe
        timeout-minutes: 20
        env:
          HEALTH_CHECK_URL: ${{ steps.retrieve-health-check-url.outputs.stdout }}
        run: |
          echo "Curling \`health_check_url\` for a return status of 200..."
          while ! curl \
            --connect-timeout 10 \
            -sfS --max-time 5 --proxy socks5://localhost:5000 \
            --verbose \
            $HEALTH_CHECK_URL; \
            do sleep 5; done

      - name: Retrieve TFE URL
        id: retrieve-tfe-url
        working-directory: ${{ env.WORK_DIR_PATH }}
        run: |
          terraform output -no-color -raw tfe_url

      - name: Retrieve IACT URL
        id: retrieve-iact-url
        working-directory: ${{ env.WORK_DIR_PATH }}
        run: |
          terraform output -no-color -raw iact_url

      - name: Retrieve IACT
        id: retrieve-iact
        env:
          IACT_URL: ${{ steps.retrieve-iact-url.outputs.stdout }}
        run: |
          token=$( \
            curl --fail --retry 5 --verbose \
            --connect-timeout 10 \
            --proxy socks5://localhost:5000 "$IACT_URL")
          echo "::set-output name=token::$token"

      - name: Retrieve Initial Admin User URL
        id: retrieve-initial-admin-user-url
        working-directory: ${{ env.WORK_DIR_PATH }}
        run: |
          terraform output -no-color -raw initial_admin_user_url

      - name: Create Admin in TFE
        id: create-admin
        env:
          TFE_PASSWORD: ${{ secrets.TFE_PASSWORD }}
          IAU_URL: ${{ steps.retrieve-initial-admin-user-url.outputs.stdout }}
          IACT_TOKEN: ${{ steps.retrieve-iact.outputs.token }}
        run: |
          echo \
            '{"username": "test", "email": "team-tf-enterprise@hashicorp.com", "password": "$TFE_PASSWORD"}' \
            > ./payload.json
          response=$( \
            curl \
            --connect-timeout 10 \
            --fail \
            --retry 5 \
            --verbose \
            --header 'Content-Type: application/json' \
            --data @./payload.json \
            --proxy socks5://localhost:5000 \
            "$IAU_URL"?token="$IACT_TOKEN")
          echo "::set-output name=response::$response"

      - name: Retrieve Admin Token
        id: retrieve-admin-token
        env:
          RESPONSE: ${{ steps.create-admin.outputs.response }}
        run: |
          token=$(echo "$RESPONSE" | jq --raw-output '.token')
          echo "::set-output name=token::$token"

      - name: Run k6 Smoke Test
        id: run-smoke-test
        working-directory: ${{ env.K6_WORK_DIR_PATH }}
        env:
          K6_PATHNAME: "./k6"
          TFE_URL: "${{ steps.retrieve-tfe-url.outputs.stdout }}"
          TFE_API_TOKEN: "${{ steps.retrieve-admin-token.outputs.token }}"
          TFE_EMAIL: team-tf-enterprise@hashicorp.com
          http_proxy: socks5://localhost:5000/
          https_proxy: socks5://localhost:5000/
        run: |
          make smoke-test

      - name: Terraform Destroy
        id: destroy
        if: ${{ always() && github.event.client_payload.slash_command.args.named.destroy != 'false' }}
        working-directory: ${{ env.WORK_DIR_PATH }}
        run: terraform destroy -auto-approve -input=false -no-color

      # Run Terraform commands between these comments ^^^

      - name: Update comment
        if: ${{ always() }}
        uses: peter-evans/create-or-update-comment@3383acd359705b10cb1eeef05c0e88c056ea4666 # v3.0.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.event.client_payload.github.payload.repository.full_name }}
          comment-id: ${{ github.event.client_payload.github.payload.comment.id }}
          body: |
            ${{ format('### {0} Terraform AWS Private TCP Active/Active Test Report', job.status == 'success' && ':white_check_mark:' || ':x:') }}

            ${{ format(':link: [Action Summary Page]({0})', steps.vars.outputs.run-url) }}

            ${{ format('- {0} Terraform Init', steps.init.outcome == 'success' && ':white_check_mark:' || ':x:') }}

            ${{ format('- {0} Terraform Validate', steps.validate.outcome == 'success' && ':white_check_mark:' || ':x:') }}

            ${{ format('- {0} Terraform Apply', steps.apply.outcome == 'success' && ':white_check_mark:' || ':x:') }}

            ${{ format('- {0} Run k6 Smoke Test', steps.run-smoke-test.outcome == 'success' && ':white_check_mark:' || ':x:') }}

            ${{ github.event.client_payload.slash_command.args.named.destroy != 'false' && format('- {0} Terraform Destroy', steps.destroy.outcome == 'success' && ':white_check_mark:' || ':x:') || '' }}

  aws_public_active_active:
    name: Run tf-test on AWS Public Active/Active
    if: ${{ contains(github.event.client_payload.slash_command.args.unnamed.all, 'all') || contains(github.event.client_payload.slash_command.args.unnamed.all, 'aws-public-active-active') || contains(github.event.client_payload.slash_command.args.unnamed.all, 'full-aws')}}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    env:
      WORK_DIR_PATH: ./tests/public-active-active
      K6_WORK_DIR_PATH: ./tests/tfe-load-test
      AWS_DEFAULT_REGION: us-east-2
    steps:
      - name: Create URL to the run output
        id: vars
        run: echo ::set-output name=run-url::https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID

      # Checkout the branch of the AWS TFE module to be used to test changes
      - name: Checkout
        uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.5.2
        with:
          repository: hashicorp/terraform-aws-terraform-enterprise

      - name: Update Terraform Backend to TFC Workspace for Utility Module
        working-directory: ${{ env.WORK_DIR_PATH }}
        run: |
          sed --in-place 's/aws-public-active-active/utility-aws-public-active-active/' versions.tf

      - name: Set Terraform Utility Module Sources
        working-directory: ${{ env.WORK_DIR_PATH }}
        env:
          SHA: ${{ github.event.client_payload.pull_request.head.sha }}
        run: |
          sed --in-place "s/?ref=main/?ref=$SHA/" ../../main.tf

      # Checkout the hashicorp/tfe-load-test repository
      - name: Checkout TFE Load Test
        uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.5.2
        with:
          path: ${{ env.K6_WORK_DIR_PATH }}
          repository: hashicorp/tfe-load-test
          token: ${{ secrets.GH_TFE_LOAD_TEST_TOKEN }}
          persist-credentials: false

      - name: Install required tools
        working-directory: ${{ env.K6_WORK_DIR_PATH }}
        env:
          K6_URL: https://github.com/loadimpact/k6/releases/download/v0.31.1/k6-v0.31.1-linux64.tar.gz
        run: |
          sudo apt-get install jq
          curl -L $K6_URL | tar -xz --strip-components=1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_hostname: 'app.terraform.io'
          cli_config_credentials_token: ${{ secrets.UTILITY_AWS_PUBLIC_ACTIVE_ACTIVE_TFC_TOKEN }}
          terraform_version: 1.1.5
          terraform_wrapper: true

      # Run Terraform commands between these comments vvv

      - name: Terraform Init
        id: init
        working-directory: ${{ env.WORK_DIR_PATH }}
        run: terraform init -input=false -no-color

      - name: Terraform Validate
        id: validate
        working-directory: ${{ env.WORK_DIR_PATH }}
        run: terraform validate -no-color

      - name: Write GitHub Actions runner CIDR to Terraform Variables
        working-directory: ${{ env.WORK_DIR_PATH }}
        run: |
          echo "iact_subnet_list = [\"$( dig +short @resolver1.opendns.com myip.opendns.com )/32\"]" > github.auto.tfvars

      - name: Terraform Apply
        id: apply
        working-directory: ${{ env.WORK_DIR_PATH }}
        run: terraform apply -auto-approve -input=false -no-color

      - name: Retrieve Health Check URL
        id: retrieve-health-check-url
        working-directory: ${{ env.WORK_DIR_PATH }}
        run: |
          terraform output -no-color -raw health_check_url

      - name: Wait For TFE
        id: wait-for-tfe
        timeout-minutes: 15
        env:
          HEALTH_CHECK_URL: ${{ steps.retrieve-health-check-url.outputs.stdout }}
        run: |
          echo "Curling \`health_check_url\` for a return status of 200..."
          while ! curl -sfS --max-time 5 "$HEALTH_CHECK_URL"; do sleep 5; done

      - name: Retrieve TFE URL
        id: retrieve-tfe-url
        working-directory: ${{ env.WORK_DIR_PATH }}
        run: |
          terraform output -no-color -raw tfe_url

      - name: Retrieve IACT URL
        id: retrieve-iact-url
        working-directory: ${{ env.WORK_DIR_PATH }}
        run: |
          terraform output -no-color -raw iact_url

      - name: Retrieve IACT
        id: retrieve-iact
        env:
          IACT_URL: ${{ steps.retrieve-iact-url.outputs.stdout }}
        run: |
          token=$(curl --fail --retry 5 --verbose "$IACT_URL")
          echo "::set-output name=token::$token"

      - name: Retrieve Initial Admin User URL
        id: retrieve-initial-admin-user-url
        working-directory: ${{ env.WORK_DIR_PATH }}
        run: |
          terraform output -no-color -raw initial_admin_user_url

      - name: Create Admin in TFE
        id: create-admin
        env:
          TFE_PASSWORD: ${{ secrets.TFE_PASSWORD }}
          IAU_URL: ${{ steps.retrieve-initial-admin-user-url.outputs.stdout }}
          IACT: ${{ steps.retrieve-iact.outputs.token }}
        run: |
          echo \
            '{"username": "test", "email": "tf-onprem-team@hashicorp.com", "password": "$TFE_PASSWORD"}' \
            > ./payload.json
          response=$( \
            curl \
            --fail \
            --retry 5 \
            --verbose \
            --header 'Content-Type: application/json' \
            --data @./payload.json \
            "$IAU_URL"?token="$IACT")
          echo "::set-output name=response::$response"

      - name: Retrieve Admin Token
        id: retrieve-admin-token
        env:
          RESPONSE: ${{ steps.create-admin.outputs.response }}
        run: |
          token=$(echo "$RESPONSE" | jq --raw-output '.token')
          echo "::set-output name=token::$token"

      - name: Run k6 Smoke Test
        id: run-smoke-test
        working-directory: ${{ env.K6_WORK_DIR_PATH }}
        env:
          K6_PATHNAME: "./k6"
          TFE_URL: "${{ steps.retrieve-tfe-url.outputs.stdout }}"
          TFE_API_TOKEN: "${{ steps.retrieve-admin-token.outputs.token }}"
          TFE_EMAIL: tf-onprem-team@hashicorp.com
        run: |
          make smoke-test

      - name: Terraform Destroy
        id: destroy
        if: ${{ always() && github.event.client_payload.slash_command.args.named.destroy != 'false' }}
        working-directory: ${{ env.WORK_DIR_PATH }}
        run: terraform destroy -auto-approve -input=false -no-color

      # Run Terraform commands between these comments ^^^

      - name: Update comment
        if: ${{ always() }}
        uses: peter-evans/create-or-update-comment@3383acd359705b10cb1eeef05c0e88c056ea4666 # v3.0.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.event.client_payload.github.payload.repository.full_name }}
          comment-id: ${{ github.event.client_payload.github.payload.comment.id }}
          body: |
            ${{ format('### {0} Terraform Public Active/Active Test Report', job.status == 'success' && ':white_check_mark:' || ':x:') }}

            ${{ format(':link: [Action Summary Page]({0})', steps.vars.outputs.run-url) }}

            ${{ format('- {0} Terraform Init', steps.init.outcome == 'success' && ':white_check_mark:' || ':x:') }}

            ${{ format('- {0} Terraform Validate', steps.validate.outcome == 'success' && ':white_check_mark:' || ':x:') }}

            ${{ format('- {0} Terraform Apply', steps.apply.outcome == 'success' && ':white_check_mark:' || ':x:') }}

            ${{ format('- {0} Run k6 Smoke Test', steps.run-smoke-test.outcome == 'success' && ':white_check_mark:' || ':x:') }}

            ${{ github.event.client_payload.slash_command.args.named.destroy != 'false' && format('- {0} Terraform Destroy', steps.destroy.outcome == 'success' && ':white_check_mark:' || ':x:') || '' }}

  aws_standalone_vault:
    name: Run tf-test on AWS Standalone Vault
    if: ${{ contains(github.event.client_payload.slash_command.args.unnamed.all, 'all') || contains(github.event.client_payload.slash_command.args.unnamed.all, 'aws-standalone-vault') || contains(github.event.client_payload.slash_command.args.unnamed.all, 'full-aws')}}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    env:
      WORK_DIR_PATH: ./tests/standalone-vault
      K6_WORK_DIR_PATH: ./tests/tfe-load-test
      AWS_DEFAULT_REGION: us-east-2
    steps:
      - name: Create URL to the run output
        id: vars
        run: echo ::set-output name=run-url::https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID

      # Checkout the branch of the AWS TFE module to be used to test changes
      - name: Checkout
        uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.5.2
        with:
          repository: hashicorp/terraform-aws-terraform-enterprise

      - name: Set Terraform Backend to TFC Workspace
        working-directory: ${{ env.WORK_DIR_PATH }}
        run: |
          sed --in-place 's/terraform {/terraform {\n\
            backend "remote" {\n\
              organization = "terraform-enterprise-modules-test"\n\
              workspaces {\n\
                name = "utility-aws-standalone-vault"\n\
              }\n\
            }\n/' versions.tf

      - name: Set Terraform Utility Module Sources
        working-directory: ${{ env.WORK_DIR_PATH }}
        env:
          SHA: ${{ github.event.client_payload.pull_request.head.sha }}
        run: |
          sed --in-place "s/?ref=main/?ref=$SHA/" ../../main.tf
          sed --in-place "s/?ref=main/?ref=$SHA/" main.tf

      # Checkout the hashicorp/tfe-load-test repository
      - name: Checkout TFE Load Test
        uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.5.2
        with:
          path: ${{ env.K6_WORK_DIR_PATH }}
          repository: hashicorp/tfe-load-test
          token: ${{ secrets.GH_TFE_LOAD_TEST_TOKEN }}
          persist-credentials: false

      - name: Install required tools
        working-directory: ${{ env.K6_WORK_DIR_PATH }}
        env:
          K6_URL: https://github.com/loadimpact/k6/releases/download/v0.31.1/k6-v0.31.1-linux64.tar.gz
        run: |
          sudo apt-get install jq
          curl -L $K6_URL | tar -xz --strip-components=1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_hostname: 'app.terraform.io'
          cli_config_credentials_token: ${{ secrets.UTILITY_AWS_STANDALONE_VAULT_TFC_TOKEN }}
          terraform_version: 1.1.5
          terraform_wrapper: true

      # Run Terraform commands between these comments vvv

      - name: Terraform Init
        id: init
        working-directory: ${{ env.WORK_DIR_PATH }}
        run: terraform init -input=false -no-color

      - name: Terraform Validate
        id: validate
        working-directory: ${{ env.WORK_DIR_PATH }}
        run: terraform validate -no-color

      - name: Write GitHub Actions runner CIDR to Terraform Variables
        working-directory: ${{ env.WORK_DIR_PATH }}
        run: |
          echo "iact_subnet_list = [\"$( dig +short @resolver1.opendns.com myip.opendns.com )/32\"]" > github.auto.tfvars

      - name: Terraform Apply HCP Vault
        id: first-apply
        working-directory: ${{ env.WORK_DIR_PATH }}
        run: terraform apply -target=module.hcp_vault.hcp_vault_cluster.test -target=module.hcp_vault.hcp_vault_cluster_admin_token.test -auto-approve -input=false -no-color 

      - name: Terraform Apply
        id: apply
        working-directory: ${{ env.WORK_DIR_PATH }}
        run: terraform apply -auto-approve -input=false -no-color

      - name: Retrieve Health Check URL
        id: retrieve-health-check-url
        working-directory: ${{ env.WORK_DIR_PATH }}
        run: |
          terraform output -no-color -raw ptfe_health_check

      - name: Wait For TFE
        id: wait-for-tfe
        timeout-minutes: 15
        env:
          HEALTH_CHECK_URL: ${{ steps.retrieve-health-check-url.outputs.stdout }}
        run: |
          echo "Curling \`health_check_url\` for a return status of 200..."
          while ! curl -sfS --max-time 5 "$HEALTH_CHECK_URL"; do sleep 5; done

      - name: Retrieve TFE URL
        id: retrieve-tfe-url
        working-directory: ${{ env.WORK_DIR_PATH }}
        run: |
          terraform output -no-color -raw ptfe_endpoint

      - name: Retrieve IACT
        id: retrieve-iact
        env:
          IACT_URL: "${{ steps.retrieve-tfe-url.outputs.stdout }}/admin/retrieve-iact"
        run: |
          token=$(curl --fail --retry 5 --verbose "$IACT_URL")
          echo "::set-output name=token::$token"

      - name: Create Admin in TFE
        id: create-admin
        env:
          TFE_PASSWORD: ${{ secrets.TFE_PASSWORD }}
          IAU_URL: "${{ steps.retrieve-tfe-url.outputs.stdout }}/admin/initial-admin-user"
          IACT: ${{ steps.retrieve-iact.outputs.token }}
        run: |
          echo \
            '{"username": "test", "email": "team-tf-enterprise@hashicorp.com", "password": "$TFE_PASSWORD"}' \
            > ./payload.json
          response=$( \
            curl \
            --fail \
            --retry 5 \
            --verbose \
            --header 'Content-Type: application/json' \
            --data @./payload.json \
            "$IAU_URL"?token="$IACT")
          echo "::set-output name=response::$response"

      - name: Retrieve Admin Token
        id: retrieve-admin-token
        env:
          RESPONSE: ${{ steps.create-admin.outputs.response }}
        run: |
          token=$(echo "$RESPONSE" | jq --raw-output '.token')
          echo "::set-output name=token::$token"

      - name: Run k6 Smoke Test
        id: run-smoke-test
        working-directory: ${{ env.K6_WORK_DIR_PATH }}
        env:
          K6_PATHNAME: "./k6"
          TFE_URL: "${{ steps.retrieve-tfe-url.outputs.stdout }}"
          TFE_API_TOKEN: "${{ steps.retrieve-admin-token.outputs.token }}"
          TFE_EMAIL: team-tf-enterprise@hashicorp.com
        run: |
          make smoke-test

      - name: Terraform Destroy
        id: destroy
        if: ${{ always() && github.event.client_payload.slash_command.args.named.destroy != 'false' }}
        working-directory: ${{ env.WORK_DIR_PATH }}
        run: terraform destroy -auto-approve -input=false -no-color

      # Run Terraform commands between these comments ^^^

      - name: Update comment
        if: ${{ always() }}
        uses: peter-evans/create-or-update-comment@3383acd359705b10cb1eeef05c0e88c056ea4666 # v3.0.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.event.client_payload.github.payload.repository.full_name }}
          comment-id: ${{ github.event.client_payload.github.payload.comment.id }}
          body: |
            ${{ format('### {0} Terraform AWS Standalone Vault Test Report', job.status == 'success' && ':white_check_mark:' || ':x:') }}

            ${{ format(':link: [Action Summary Page]({0})', steps.vars.outputs.run-url) }}

            ${{ format('- {0} Terraform Init', steps.init.outcome == 'success' && ':white_check_mark:' || ':x:') }}

            ${{ format('- {0} Terraform Validate', steps.validate.outcome == 'success' && ':white_check_mark:' || ':x:') }}

            ${{ format('- {0} Terraform Apply', steps.apply.outcome == 'success' && ':white_check_mark:' || ':x:') }}

            ${{ format('- {0} Run k6 Smoke Test', steps.run-smoke-test.outcome == 'success' && ':white_check_mark:' || ':x:') }}

            ${{ github.event.client_payload.slash_command.args.named.destroy != 'false' && format('- {0} Terraform Destroy', steps.destroy.outcome == 'success' && ':white_check_mark:' || ':x:') || '' }}
