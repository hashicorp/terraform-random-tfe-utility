name: AWS Test Harness

on:
  workflow_call:
    inputs:
      test_name:
        description: |-
          The name for this test run. eg: 'Public Active/Active'
        required: true
        type: string
      utility_test:
        description: "Is this test run being executed from the utility repo?"
        type: boolean
        required: false
        default: false
      is_replicated_deployment:
        description: "Is this test scenario using Replicated to deploy TFE?"
        type: boolean
        required: true
        default: false
      first_apply_args:
        description: "Terraform arguments for the first apply operation."
        required: false
        type: string
        default: ''
      module_repository_id:
        description: |-
          For utility module tests, what is the source module repo for this test? 
          eg: hashicorp/terraform-aws-terraform-enterprise
        required: true
        type: string
      pull_request_repo_name: 
        description: |-
          The name of the initiating pull request repo.
        required: true
        type: string
      pull_request_ref: 
        description: |-
          The ref of the pull request initiating this action. This is relevent
          to both utility module changes and non-utility module changes.
        required: true
        type: string
      pull_request_comment_id: 
        description: |-
          The ref of the pull request comment initiating this action. This is 
          relevent to both utility module changes and non-utility module changes.
        required: true
        type: string
      work_dir:
        description: "The directory in which tests are executed"
        required: true
        type: string
      k6_work_dir: 
        description: "The directory in which k6 is installed"
        required: true
        type: string
      TFC_token_secret_name:
        description: |- 
          The id of the github secret that contains the TFC token for the tfc
          workspace for this test.
        required: true
        type: string
      TFC_workspace_substitution_pattern:
        description: |- 
          The sed supstitution pattern used to retarget this test to another TFC
          workspace. This is used primarily in testing the utility modules.
          eg: s/aws-public-active-active/utility-aws-public-active-active/
        required: false
        type: string
        default: ""
      ssh_private_key_secret_name:
        description: |-
          The github secret name for a Base64 encoded private certificate used
          to authenticate into and proxy tests from the TFE instance.
        required: false
        default: ""
        type: string
      aws_access_key_id:
        description: |-
          The access key ID of the AWS credentials used to authenticate into
          and proxy tests from the TFE instance.
        required: false
        type: string
      aws_secret_access_key:
        description: |-
          The secret access key of the AWS credentials used to authenticate
          into and proxy tests from the TFE instance.
        required: false
        type: string
      aws_role_to_assume:
        description: |-
          The role to assume for the AWS credentials used to authenticate
          into and proxy tests from the TFE instance.
        required: false
        type: string

jobs:
  execute_aws_tests:
    name: ${{ inputs.is_replicated_deployment && 'Replicated' || 'FDO' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    env:
      WORK_DIR_PATH: ${{ inputs.work_dir }} 
      K6_WORK_DIR_PATH: ${{ inputs.k6_work_dir }}
    steps:
      - name: Create URL to the run output
        id: vars
        run: echo ::set-output name=run-url::https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID
      
      # Module Checkout
      # If this is not a utility module test, check out the pull request under
      # test in the module repo.
      - name: Checkout
        if: ${{ ! inputs.utility_test }}
        uses: actions/checkout@8ade135a41bc03ea155e62e844d188df1ea18608 # v4.1.0
        with:
          repository: ${{ github.event.client_payload.pull_request.head.repo.full_name }}
          ref: ${{ github.event.client_payload.pull_request.head.sha }}
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: false

      # If this is a utility test then checkout out the module source and patch
      # the configuration to target the appropriate TFC workspace.
      - name: Checkout
        if: ${{ inputs.utility_test }}
        uses: actions/checkout@8ade135a41bc03ea155e62e844d188df1ea18608 # v4.1.0
        with:
          repository: ${{inputs.module_repository_id}}
      
      - name: Update Terraform Backend to TFC Workspace for Utility Module
        working-directory: ${{ env.WORK_DIR_PATH }}
        run: |
          sed --in-place '${{ inputs.TFC_workspace_substitution_pattern }}' versions.tf

      - name: Set Terraform Utility Module Sources
        if: ${{ inputs.utility_test }}
        working-directory: ${{ env.WORK_DIR_PATH }}
        env:
          SHA: ${{ inputs.pull_request_ref }}
        run: |
          sed --in-place "s/?ref=main/?ref=$SHA/" ../../main.tf
          sed --in-place "s/?ref=main/?ref=$SHA/" ../../fixtures/test_proxy/main.tf

      - name: Checkout TFE Load Test
        uses: actions/checkout@8ade135a41bc03ea155e62e844d188df1ea18608 # v4.1.0
        with:
          path: ${{ env.K6_WORK_DIR_PATH }}
          repository: hashicorp/tfe-load-test
          token: ${{ secrets.GH_TFE_LOAD_TEST_TOKEN }}
          persist-credentials: false

      - name: Install required tools
        working-directory: ${{ env.K6_WORK_DIR_PATH }}
        env:
          K6_URL: https://github.com/loadimpact/k6/releases/download/v0.31.1/k6-v0.31.1-linux64.tar.gz
        run: |
          sudo apt-get install jq
          curl -L $K6_URL | tar -xz --strip-components=1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_hostname: 'app.terraform.io'
          cli_config_credentials_token: ${{ secrets[inputs.TFC_token_secret_name] }}
          terraform_version: 1.1.5
          terraform_wrapper: false

      - name: Write Private SSH Key
        if: ${{ inputs.ssh_private_key_secret_name != '' }}
        working-directory: ${{ env.WORK_DIR_PATH }}
        env:
          SSH_KEY_BASE64: ${{ secrets[inputs.ssh_private_key_secret_name]  }}
        run: |
          echo "$SSH_KEY_BASE64" | base64 --decode > ./ssh-key.pem
          chmod 0400 ./ssh-key.pem

      - name: Terraform Init
        id: init
        working-directory: ${{ env.WORK_DIR_PATH }}
        run: terraform init -input=false -no-color

      - name: Terraform Validate
        id: validate
        working-directory: ${{ env.WORK_DIR_PATH }}
        run: terraform validate -no-color

      - name: Write GitHub Actions runner CIDR to Terraform Variables
        working-directory: ${{ env.WORK_DIR_PATH }}
        run: |
          echo "is_replicated_deployment = ${{ inputs.is_replicated_deployment }}" >> github.auto.tfvars

      - name: Terraform Targeted Pre-Apply
        if: ${{ inputs.first_apply_args != '' }}
        id: pre-apply
        working-directory: ${{ env.WORK_DIR_PATH}}
        run: |
          terraform apply ${{ inputs.first_apply_args }} --auto-approve
          sleep 180

      - name: Terraform Apply
        id: apply
        working-directory: ${{ env.WORK_DIR_PATH }}
        run: terraform apply -auto-approve -input=false -no-color

      - name: Retrieve Health Check URL
        id: retrieve-health-check-url
        working-directory: ${{ env.WORK_DIR_PATH }}
        run: echo "HEALTH_CHECK_URL=$(terraform output -no-color -raw health_check_url)" >> $GITHUB_ENV

      - name: Retrieve Instance ID
        if: ${{ inputs.ssh_private_key_secret_name != '' }}
        id: retrieve-instance-id
        working-directory: ${{ env.WORK_DIR_PATH }}
        run: echo "INSTANCE_ID=$(terraform output -no-color -raw proxy_instance_id)" >> $GITHUB_ENV

      - name: Configure AWS Credentials
        if: ${{ inputs.ssh_private_key_secret_name != '' }}
        uses: aws-actions/configure-aws-credentials@8c3f20df09ac63af7b3ae3d7c91f105f857d8497 # v4.0.0
        with:
          aws-access-key-id: ${{ secrets[inputs.aws_access_key_id] }}
          aws-secret-access-key: ${{ secrets[inputs.aws_secret_access_key] }}
          aws-region: us-east-2
          role-to-assume: ${{ secrets[inputs.aws_role_to_assume] }}
          role-duration-seconds: 2400
          role-skip-session-tagging: true

      - name: Start SOCKS5 Proxy
        if: ${{ inputs.ssh_private_key_secret_name != '' }}
        working-directory: ${{ env.WORK_DIR_PATH }}
        run: |
          aws ec2 wait instance-status-ok --instance-ids "$INSTANCE_ID"
          ssh \
            -o 'BatchMode yes' \
            -o 'StrictHostKeyChecking accept-new' \
            -o 'ServerAliveInterval 5' \
            -o 'ServerAliveCountMax 3' \
            -o 'ProxyCommand sh -c \
              "aws ssm start-session \
                --target %h \
                --document-name AWS-StartSSHSession \
                --parameters \"portNumber=%p\""' \
            -i ./ssh-key.pem \
            -f -N -p 22 -D localhost:5000 \
            ubuntu@"$INSTANCE_ID"

      - name: Check for Proxy
        run: echo "USE_PROXY=${{ inputs.ssh_private_key_secret_name != '' && '--proxy socks5://localhost:5000' || '' }}" >> $GITHUB_ENV

      - name: Wait For TFE
        timeout-minutes: 20
        run: |
          echo "health_check_endpoint: $HEALTH_CHECK_URL"
          echo "Curling \`health_check_url\` for a return status of 200..."
          while ! curl \
            --connect-timeout 10 \
            -sfS --max-time 5 \
            $USE_PROXY \
            $HEALTH_CHECK_URL; \
            do sleep 5; done

      - name: Retrieve TFE URL
        working-directory: ${{ env.WORK_DIR_PATH }}
        run: echo "TFE_URL=$(terraform output -no-color -raw tfe_url)" >> $GITHUB_ENV

      - name: Retrieve IACT
        run: |
          expiration=$(( $( date '+%s' ) + 90 ))
          sleep_duration=60
          until token=$(curl --fail --retry 10 \
            --connect-timeout 10 \
            $USE_PROXY "$TFE_URL/admin/retrieve-iact")
          do
            if [ "$( date '+%s' )" -gt "${expiration}" ]
            then
                echo -e "\nFailed to retrieve IACT token"
                exit 1
            fi
            echo "Sleeping for ${sleep_duration} seconds and retrying retrieval of IACT token."
            sleep "${sleep_duration}"
          done
          echo "IACT_TOKEN=$token" >> $GITHUB_ENV

      - name: Create Admin in TFE
        env:
          TFE_PASSWORD: ${{ secrets.TFE_PASSWORD }}
        run: |
          echo \
            '{"username": "test", "email": "team-tf-enterprise@hashicorp.com", "password": "$TFE_PASSWORD"}' \
            > ./payload.json
          response=$( \
            curl \
            --connect-timeout 10 \
            --fail \
            --retry 5 \
            --header 'Content-Type: application/json' \
            --data @./payload.json \
            $USE_PROXY \
            "$TFE_URL/admin/initial-admin-user"?token="$IACT_TOKEN")
          echo "RESPONSE=$response" >> $GITHUB_ENV

      - name: Retrieve Admin Token
        run: |
          token=$(echo "$RESPONSE" | jq --raw-output '.token')
          echo "TFE_API_TOKEN=$token" >> $GITHUB_ENV

      - name: Run k6 Smoke Test
        id: run-smoke-test
        working-directory: ${{ env.K6_WORK_DIR_PATH }}
        env:
          K6_PATHNAME: "./k6"
          TFE_EMAIL: team-tf-enterprise@hashicorp.com
          http_proxy: ${{ inputs.ssh_private_key_secret_name != '' && 'socks5://localhost:5000/' || '' }}
          https_proxy: ${{ inputs.ssh_private_key_secret_name != '' && 'socks5://localhost:5000/' || '' }}
        run: |
          echo "http_proxy: $http_proxy"
          make smoke-test

      - name: Terraform Destroy
        id: destroy
        if: ${{ always() && github.event.client_payload.slash_command.args.named.destroy != 'false' }}
        working-directory: ${{ env.WORK_DIR_PATH }}
        run: terraform destroy -auto-approve -input=false -no-color

      - name: Update comment
        if: ${{ always() }}
        uses: peter-evans/create-or-update-comment@c6c9a1a66007646a28c153e2a8580a5bad27bcfa # v3.0.2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ inputs.pull_request_repo_name }}
          comment-id: ${{ inputs.pull_request_comment_id }}
          body: |
            ${{ format('### {0} Terraform AWS {1} ({2}) - Test Report', job.status == 'success' && ':white_check_mark:' || ':x:', inputs.test_name, inputs.is_replicated_deployment && 'Legacy' || 'FDO') }}

            ${{ format(':link: [Action Summary Page]({0})', steps.vars.outputs.run-url) }}

            ${{ format('- {0} Terraform Init', steps.init.outcome == 'success' && ':white_check_mark:' || ':x:') }}

            ${{ format('- {0} Terraform Validate', steps.validate.outcome == 'success' && ':white_check_mark:' || ':x:') }}

            ${{ format('- {0} Terraform Apply', steps.apply.outcome == 'success' && ':white_check_mark:' || ':x:') }}

            ${{ format('- {0} Run k6 Smoke Test', steps.run-smoke-test.outcome == 'success' && ':white_check_mark:' || ':x:') }}

            ${{ github.event.client_payload.slash_command.args.named.destroy != 'false' && format('- {0} Terraform Destroy', steps.destroy.outcome == 'success' && ':white_check_mark:' || ':x:') || '' }}
