name: Google Test Harness

on:
  workflow_call:
    inputs:
      test_name:
        description: |-
          The name for this test run. eg: 'Public Active/Active'
        required: true
        type: string
      utility_test:
        description: "Is this test run being executed from the utility repo?"
        type: boolean
        required: false
        default: false
      is_replicated_deployment:
        description: "Is this test scenario using Replicated to deploy TFE?"
        type: boolean
        required: true
        default: false
      enable_iact_subnet_list:
        description: "Do you want to enable ssh from GHA agent to TFE?"
        type: boolean
        required: false
        default: false
      private_test:
        description: "Is this a private or public test?"
        type: boolean
        required: false
        default: false
      module_repository_id:
        description: |-
          For utility module tests, what is the source module repo for this test? 
          eg: hashicorp/terraform-google-terraform-enterprise
        required: true
        type: string
      pull_request_repo_name: 
        description: |-
          The name of the initiating pull request repo.
        required: true
        type: string
      pull_request_ref: 
        description: |-
          The ref of the pull request initiating this action. This is relevent
          to both utility module changes and non-utility module changes.
        required: true
        type: string
      pull_request_comment_id: 
        description: |-
          The ref of the pull request comment initiating this action. This is 
          relevent to both utility module changes and non-utility module changes.
        required: true
        type: string
      work_dir:
        description: "The directory in which tests are executed"
        required: true
        type: string
      k6_work_dir: 
        description: "The directory in which k6 is installed"
        required: true
        type: string
      TFC_token_secret_name:
        description: |- 
          The id of the github secret that contains the TFC token for the tfc
          workspace for this test.
        required: true
        type: string
      TFC_workspace_substitution_pattern:
        description: |- 
          The sed supstitution pattern used to retarget this test to another TFC
          workspace. This is used primarily in testing the utility modules.
          eg: s/google-public-active-active/utility-google-public-active-active/
        required: false
        type: string
        default: ""

env:
  GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
  GOOGLE_PROJECT: ${{ secrets.GOOGLE_PROJECT }}
  GOOGLE_REGION: ${{ secrets.GOOGLE_REGION }}
  GOOGLE_ZONE: ${{ secrets.GOOGLE_ZONE }}

jobs:
  execute_google_tests:
    name: Test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    env:
      WORK_DIR_PATH: ${{ inputs.work_dir }} 
      K6_WORK_DIR_PATH: ${{ inputs.k6_work_dir }}
    steps:
      - name: Create URL to the run output
        id: vars
        run: echo ::set-output name=run-url::https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID
      
      # If this is not a utility module test, check out the pull request under
      # test in the module repo.
      - name: Checkout
        if: ${{ ! inputs.utility_test }}
        uses: actions/checkout@8ade135a41bc03ea155e62e844d188df1ea18608 # v4.1.0
        with:
          repository: ${{ github.event.client_payload.pull_request.head.repo.full_name }}
          ref: ${{ github.event.client_payload.pull_request.head.sha }}
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: false

      # If this is a utility test then checkout out the module source and patch
      # the configuration to target the appropriate TFC workspace.
      - name: Checkout
        if: ${{ inputs.utility_test }}
        uses: actions/checkout@8ade135a41bc03ea155e62e844d188df1ea18608 # v4.1.0
        with:
          repository: ${{inputs.module_repository_id}}
      
      - name: Update Terraform Backend to TFC Workspace for Utility Module
        working-directory: ${{ env.WORK_DIR_PATH }}
        run: |
          sed --in-place '${{ inputs.TFC_workspace_substitution_pattern }}' versions.tf

      - name: Set Terraform Utility Module Sources
        if: ${{ inputs.utility_test }}
        working-directory: ${{ env.WORK_DIR_PATH }}
        env:
          SHA: ${{ inputs.pull_request_ref }}
        run: |
          sed --in-place "s/?ref=main/?ref=$SHA/" ../../main.tf

      - name: Checkout TFE Load Test
        uses: actions/checkout@8ade135a41bc03ea155e62e844d188df1ea18608 # v4.1.0
        with:
          path: ${{ env.K6_WORK_DIR_PATH }}
          repository: hashicorp/tfe-load-test
          token: ${{ secrets.GH_TFE_LOAD_TEST_TOKEN }}
          persist-credentials: false

      - name: Install required tools
        working-directory: ${{ env.K6_WORK_DIR_PATH }}
        env:
          K6_URL: https://github.com/loadimpact/k6/releases/download/v0.31.1/k6-v0.31.1-linux64.tar.gz
        run: |
          sudo apt-get install jq
          curl -L $K6_URL | tar -xz --strip-components=1

      - name: Authenticate to GCP
        id: auth
        uses: google-github-actions/auth@35b0e87d162680511bf346c299f71c9c5c379033 # v1.1.1
        with:
          credentials_json: ${{ secrets.GCP_TUNNELING_CREDENTIALS }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@e30db14379863a8c79331b04a9969f4c1e225e0b # v1.1.1
        with:
          project_id: ${{ secrets.GOOGLE_PROJECT }}
      
      - name: Increase the TCP upload bandwidth
        id: increasing_the_tcp_upload_bandwidth
        working-directory: ${{ env.WORK_DIR_PATH }}
        run: |
          $(gcloud info --format="value(basic.python_location)") -m pip install numpy
          export CLOUDSDK_PYTHON_SITEPACKAGES=1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_hostname: 'app.terraform.io'
          cli_config_credentials_token: ${{ secrets[inputs.TFC_token_secret_name] }}
          terraform_version: 1.1.5
          terraform_wrapper: true

      - name: Terraform Init
        id: init
        working-directory: ${{ env.WORK_DIR_PATH }}
        run: terraform init -input=false -no-color

      - name: Terraform Validate
        id: validate
        working-directory: ${{ env.WORK_DIR_PATH }}
        run: terraform validate -no-color

      - name: Write Terraform Variables
        if: ${{ inputs.enable_iact_subnet_list }} 
        working-directory: ${{ env.WORK_DIR_PATH }}
        run: |
          ip_address=$( dig +short @resolver1.opendns.com myip.opendns.com )
          cat <<EOF > github.auto.tfvars
          iact_subnet_list = ["$ip_address/32"]
          is_replicated_deployment = ${{ inputs.is_replicated_deployment }}
          EOF
          
      - name: Terraform Apply
        id: apply
        working-directory: ${{ env.WORK_DIR_PATH }}
        run: terraform apply -auto-approve -input=false -no-color

      - name: Retrieve Health Check URL
        id: retrieve-health-check-url
        working-directory: ${{ env.WORK_DIR_PATH }}
        run: |
          terraform output -no-color -raw health_check_url

      - name: Retrieve Instance Name - Private
        id: retrieve-instance-name
        if: ${{ inputs.private_test }} 
        working-directory: ${{ env.WORK_DIR_PATH }}
        run: |
          terraform output -no-color -raw proxy_instance_name

      - name: Retrieve Instance Zone - Private
        if: ${{ inputs.private_test }}
        id: retrieve-instance-zone
        working-directory: ${{ env.WORK_DIR_PATH }}
        run: |
          terraform output -no-color -raw proxy_instance_zone

      - name: Retrieve TFE URL
        id: retrieve-tfe-url
        working-directory: ${{ env.WORK_DIR_PATH }}
        run: |
          terraform output -no-color -raw tfe_url

      - name: Retrieve IACT URL
        id: retrieve-iact-url
        working-directory: ${{ env.WORK_DIR_PATH }}
        run: |
          terraform output -no-color -raw iact_url

      - name: Retrieve Initial Admin User URL
        id: retrieve-initial-admin-user-url
        working-directory: ${{ env.WORK_DIR_PATH }}
        run: |
          terraform output -no-color -raw initial_admin_user_url

      - name: Run k6 Smoke Test
        id: run-smoke-test
        working-directory: ${{ env.WORK_DIR_PATH }}
        env:
          K6_PATHNAME: "./k6"
          TFE_URL: "${{ steps.retrieve-tfe-url.outputs.stdout }}"
          HEALTHCHECK_URL: "${{ steps.retrieve-health-check-url.outputs.stdout }}"
          PROXY_ZONE: ${{ inputs.private_test && steps.retrieve-instance-zone.outputs.stdout || '' }}
          PROXY_INSTANCE: ${{ inputs.private_test && steps.retrieve-instance-name.outputs.stdout || '' }}
          IACT_URL: "${{ steps.retrieve-iact-url.outputs.stdout }}"
          IAU_URL: "${{ steps.retrieve-initial-admin-user-url.outputs.stdout }}"
        run: |
          command="bash ./run-tests.sh -k ./k6 -t ../../${{ env.K6_WORK_DIR_PATH }}"
          echo $command
          eval $command

      - name: Terraform Destroy
        id: destroy
        if: ${{ always() && github.event.client_payload.slash_command.args.named.destroy != 'false' }}
        working-directory: ${{ env.WORK_DIR_PATH }}
        run: terraform destroy -auto-approve -input=false -no-color

      - name: Update comment
        if: ${{ always() }}
        uses: peter-evans/create-or-update-comment@c6c9a1a66007646a28c153e2a8580a5bad27bcfa # v3.0.2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ inputs.pull_request_repo_name }}
          comment-id: ${{ inputs.pull_request_comment_id }}
          body: |
            ${{ format('### {0} Terraform Google {1} ({2}) - Test Report', job.status == 'success' && ':white_check_mark:' || ':x:', inputs.test_name, inputs.is_replicated_deployment && 'Legacy' || 'FDO') }}

            ${{ format(':link: [Action Summary Page]({0})', steps.vars.outputs.run-url) }}

            ${{ format('- {0} Terraform Init', steps.init.outcome == 'success' && ':white_check_mark:' || ':x:') }}

            ${{ format('- {0} Terraform Validate', steps.validate.outcome == 'success' && ':white_check_mark:' || ':x:') }}

            ${{ format('- {0} Terraform Apply', steps.apply.outcome == 'success' && ':white_check_mark:' || ':x:') }}

            ${{ format('- {0} Run k6 Smoke Test', steps.run-smoke-test.outcome == 'success' && ':white_check_mark:' || ':x:') }}

            ${{ github.event.client_payload.slash_command.args.named.destroy != 'false' && format('- {0} Terraform Destroy', steps.destroy.outcome == 'success' && ':white_check_mark:' || ':x:') || '' }}
