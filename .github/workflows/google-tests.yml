name: Google Test Harness

on:
  workflow_call:
    inputs:
      #######################
      # Configuration Flags #
      #######################
      test_name:
        description: |-
          The name for this test run. eg: 'Public Active/Active'
        required: true
        type: string
      utility_test:
        description: "Is this test run being executed from the utility repo?"
        type: boolean
        required: false
        default: false
      enable_iact_subnet_list:
        description: "Do you want to enable ssh from GHA agent to TFE?"
        type: boolean
        required: false
        default: false
      create_backend:
        description: "Do you want to create a backend for TFC workspace?"
        type: boolean
        required: false
        default: false
      private_test:
        description: "Is this a private or public test?"
        type: boolean
        required: true
        default: false
      ###################################
      # Pull Request / Repo Identifiers #
      ###################################
      module_repository_id:
        description: |-
          For utility module tests, what is the source module repo for this test? 
          eg: hashicorp/terraform-google-terraform-enterprise
        required: true
        type: string
      pull_request_repo_name: 
        description: |-
          The name of the initiating pull request repo.
        required: true
        type: string
      pull_request_ref: 
        description: |-
          The ref of the pull request initiating this action. This is relevent
          to both utility module changes and non-utility module changes.
        required: true
        type: string
      pull_request_comment_id: 
        description: |-
          The ref of the pull request comment initiating this action. This is 
          relevent to both utility module changes and non-utility module changes.
        required: true
        type: string
      
      #############################
      # General Job Configuration #
      #############################
      work_dir:
        description: "The directory in which tests are executed"
        required: true
        type: string
      k6_work_dir: 
        description: "The directory in which k6 is installed"
        required: true
        type: string
      
      ###############################
      # TFC Workspace Configuration #
      ###############################
      TFC_token_secret_name:
        description: |- 
          The id of the github secret that contains the TFC token for the tfc
          workspace for this test.
        required: true
        type: string
  
      TFC_workspace_substitution_pattern:
        description: |- 
          The sed supstitution pattern used to retarget this test to another TFC
          workspace. This is used primarily in testing the utility modules.
          eg: s/google-public-active-active/utility-google-public-active-active/
        required: false
        type: string
        default: ""
      TFC_workspace:
        description: "TFC workspace"
        type: string
        required: false

jobs:
  execute_google_tests:
    name: Run tf-test on some google infrastructure
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    env:
      WORK_DIR_PATH: ${{ inputs.work_dir }} 
      K6_WORK_DIR_PATH: ${{ inputs.k6_work_dir }}
    steps:
      - name: Create URL to the run output
        id: vars
        run: echo ::set-output name=run-url::https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID
      
      ###################
      # Module Checkout #
      ###################

      # If this is not a utility module test, check out the pull request under
      # test in the module repo.
      - name: Checkout
        if: ${{ ! inputs.utility_test }}
        uses: actions/checkout@v2
        with:
          repository: ${{ github.event.client_payload.pull_request.head.repo.full_name }}
          ref: ${{ github.event.client_payload.pull_request.head.sha }}
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: false

      # If this is a utility test then checkout out the module source and patch
      # the configuration to target the appropriate TFC workspace.
      - name: Checkout
        if: ${{ inputs.utility_test }}
        uses: actions/checkout@v2
        with:
          repository: ${{inputs.module_repository_id}}
      
      - name: Update Terraform Backend to TFC Workspace for Utility Module
        if: ${{ ! inputs.create_backend }}
        working-directory: ${{ env.WORK_DIR_PATH }}
        run: |
          sed --in-place '${{ inputs.TFC_workspace_substitution_pattern }}' versions.tf

      - name: Create Terraform Backend to TFC Workspace for Utility Module
        if: ${{ inputs.create_backend }}
        working-directory: ${{ env.WORK_DIR_PATH }}
        env:
          TFC_ORGANIZATION: ${{ secrets.TFC_ORGANIZATION }}
        run: |
          cat <<EOF > backend.tf
            terraform {
              backend "remote" {
                organization = "$TFC_ORGANIZATION"
                  workspaces {
                    name = "${{ inputs.TFC_workspace }}"
                             }
                             }
                             }
          EOF
      - name: Set Terraform Utility Module Sources
        if: ${{ inputs.utility_test }}
        working-directory: ${{ env.WORK_DIR_PATH }}
        env:
          SHA: ${{ inputs.pull_request_ref }}
        run: |
          sed --in-place "s/?ref=main/?ref=$SHA/" ../../main.tf

      #################################
      # Load Test Repository Checkout #
      #################################
      - name: Checkout TFE Load Test
        uses: actions/checkout@v2
        with:
          path: ${{ env.K6_WORK_DIR_PATH }}
          repository: hashicorp/tfe-load-test
          token: ${{ secrets.GH_TFE_LOAD_TEST_TOKEN }}
          persist-credentials: false

      - name: Install required tools
        working-directory: ${{ env.K6_WORK_DIR_PATH }}
        env:
          K6_URL: https://github.com/loadimpact/k6/releases/download/v0.31.1/k6-v0.31.1-linux64.tar.gz
        run: |
          sudo apt-get install jq
          curl -L $K6_URL | tar -xz --strip-components=1

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0.2.1
        with:
          project_id: ${{ secrets.GOOGLE_PROJECT }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_hostname: 'app.terraform.io'
          cli_config_credentials_token: ${{ secrets[inputs.TFC_token_secret_name] }}
          terraform_version: 1.0.9
          terraform_wrapper: true

      #################
      # Run Terraform #
      #################
      - name: Terraform Init
        id: init
        working-directory: ${{ env.WORK_DIR_PATH }}
        run: terraform init -input=false -no-color

      - name: Terraform Validate
        id: validate
        working-directory: ${{ env.WORK_DIR_PATH }}
        run: terraform validate -no-color

      - name: Write Terraform Variables
        if: ${{ inputs.enable_iact_subnet_list }} 
        working-directory: ${{ env.WORK_DIR_PATH }}
        run: |
          ip_address=$( dig +short @resolver1.opendns.com myip.opendns.com )
          cat <<EOF > github.auto.tfvars
          iact_subnet_list = ["$ip_address/32"]
          EOF
          
      - name: Terraform Apply
        id: apply
        working-directory: ${{ env.WORK_DIR_PATH }}
        run: terraform apply -auto-approve -input=false -no-color

      ################
      # Run K6 tests #
      ################

      - name: Retrieve Health Check URL
        id: retrieve-health-check-url
        working-directory: ${{ env.WORK_DIR_PATH }}
        run: |
          terraform output -no-color -raw health_check_url

      - name: Retrieve Instance Name
        id: retrieve-instance-name
        if: ${{ inputs.private_test }} 
        working-directory: ${{ env.WORK_DIR_PATH }}
        run: |
          terraform output -no-color -raw proxy_instance_name

      - name: Retrieve Instance Zone
        if: ${{ inputs.private_test }}
        id: retrieve-instance-zone
        working-directory: ${{ env.WORK_DIR_PATH }}
        run: |
          terraform output -no-color -raw proxy_instance_zone

      - name: Start SOCKS5 Proxy
        if: ${{ inputs.private_test }}
        env:
          INSTANCE_NAME: ${{ steps.retrieve-instance-name.outputs.stdout }}
          INSTANCE_ZONE: ${{ steps.retrieve-instance-zone.outputs.stdout }}
        run: |
          gcloud compute ssh \
          --quiet \
          --ssh-key-expire-after="1440m" \
          --tunnel-through-iap \
          --zone="$INSTANCE_ZONE" \
          "$INSTANCE_NAME" \
          -- -f -N -p 22 -D localhost:5000

      - name: Wait for TFE
        id: wait-for-tfe
        if: ${{ ! inputs.private_test }}
        timeout-minutes: 25
        env:
          HEALTH_CHECK_URL: ${{ steps.retrieve-health-check-url.outputs.stdout }}
        run: |
          echo "Curling \`health_check_url\` for a return status of 200..."
          while ! curl -sfS --max-time 5 "$HEALTH_CHECK_URL"; do sleep 5; done

      - name: Wait For TFE
        if: ${{ inputs.private_test }}
        id: wait-for-tfe
        timeout-minutes: 25
        env:
          HEALTH_CHECK_URL: ${{ steps.retrieve-health-check-url.outputs.stdout }}
        run: |
          echo "Curling \`health_check_url\` for a return status of 200..."
          while ! curl \
            -sfS --max-time 5 --proxy socks5://localhost:5000 \
            $HEALTH_CHECK_URL; \
            do sleep 5; done

      - name: Retrieve TFE URL
        id: retrieve-tfe-url
        working-directory: ${{ env.WORK_DIR_PATH }}
        run: |
          terraform output -no-color -raw tfe_url

      - name: Retrieve IACT URL
        id: retrieve-iact-url
        working-directory: ${{ env.WORK_DIR_PATH }}
        run: |
          terraform output -no-color -raw iact_url

      - name: Retrieve IACT
        id: retrieve-iact
        if: ${{ ! inputs.private_test }}
        env:
          IACT_URL: ${{ steps.retrieve-iact-url.outputs.stdout }}
        run: |
          token=$(curl --fail --retry 5 --verbose "$IACT_URL")
          echo "::set-output name=token::$token"

      - name: Retrieve IACT token
        if: ${{ inputs.private_test }}
        id: retrieve-iact
        env:
          IACT_URL: ${{ steps.retrieve-iact-url.outputs.stdout }}
        run: |
          token=$(curl --fail --retry 5 --verbose --proxy socks5://localhost:5000 "$IACT_URL")
          echo "::set-output name=token::$token"

      - name: Retrieve Initial Admin User URL
        id: retrieve-initial-admin-user-url
        working-directory: ${{ env.WORK_DIR_PATH }}
        run: |
          terraform output -no-color -raw initial_admin_user_url

      - name: Create Admin
        if: ${{ ! inputs.private_test }}
        id: create-admin
        env:
          TFE_PASSWORD: ${{ secrets.TFE_PASSWORD }}
          IAU_URL: ${{ steps.retrieve-initial-admin-user-url.outputs.stdout }}
          IACT: ${{ steps.retrieve-iact.outputs.token }}
        run: |
          echo \
            '{"username": "test", "email": "tf-onprem-team@hashicorp.com", "password": "$TFE_PASSWORD"}' \
            > ./payload.json
          response=$( \
            curl \
            --fail \
            --retry 5 \
            --verbose \
            --header 'Content-Type: application/json' \
            --data @./payload.json \
            "$IAU_URL"?token="$IACT")
          echo "::set-output name=response::$response"

      - name: Create Admin in TFE
        id: create-admin
        if: ${{ inputs.private_test }}
        env:
          TFE_PASSWORD: ${{ secrets.TFE_PASSWORD }}
          IAU_URL: ${{ steps.retrieve-initial-admin-user-url.outputs.stdout }}
          IACT_TOKEN: ${{ steps.retrieve-iact.outputs.token }}
        run: |
          echo \
            '{"username": "test", "email": "tf-onprem-team@hashicorp.com", "password": "$TFE_PASSWORD"}' \
            > ./payload.json
          response=$( \
            curl \
            --fail \
            --retry 5 \
            --verbose \
            --header 'Content-Type: application/json' \
            --data @./payload.json \
            --proxy socks5://localhost:5000 \
            "$IAU_URL"?token="$IACT_TOKEN")
          echo "::set-output name=response::$response"

      - name: Retrieve Admin Token
        id: retrieve-admin-token
        env:
          RESPONSE: ${{ steps.create-admin.outputs.response }}
        run: |
          token=$(echo "$RESPONSE" | jq --raw-output '.token')
          echo "::set-output name=token::$token"

      - name: Run k6 Smoke Test
        id: run-smoke-test
        working-directory: ${{ env.K6_WORK_DIR_PATH }}
        env:
          K6_PATHNAME: "./k6"
          TFE_URL: "${{ steps.retrieve-tfe-url.outputs.stdout }}"
          TFE_API_TOKEN: "${{ steps.retrieve-admin-token.outputs.token }}"
          TFE_EMAIL: tf-onprem-team@hashicorp.com
        run: |
          make smoke-test

      ##################
      # Clean up infra #
      ##################

      - name: Terraform Destroy
        id: destroy
        if: ${{ always() && github.event.client_payload.slash_command.args.named.destroy != 'false' }}
        working-directory: ${{ env.WORK_DIR_PATH }}
        run: terraform destroy -auto-approve -input=false -no-color

      #####################
      # Update PR Comment #
      #####################

      - name: Update comment
        if: ${{ always() }}
        uses: peter-evans/create-or-update-comment@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ inputs.pull_request_repo_name }}
          comment-id: ${{ inputs.pull_request_comment_id }}
          body: |
            ${{ format('### {0} Terraform Google {1} Test Report', job.status == 'success' && ':white_check_mark:' || ':x:', inputs.test_name) }}

            ${{ format(':link: [Action Summary Page]({0})', steps.vars.outputs.run-url) }}

            ${{ format('- {0} Terraform Init', steps.init.outcome == 'success' && ':white_check_mark:' || ':x:') }}

            ${{ format('- {0} Terraform Validate', steps.validate.outcome == 'success' && ':white_check_mark:' || ':x:') }}

            ${{ format('- {0} Terraform Apply', steps.apply.outcome == 'success' && ':white_check_mark:' || ':x:') }}

            ${{ format('- {0} Run k6 Smoke Test', steps.run-smoke-test.outcome == 'success' && ':white_check_mark:' || ':x:') }}

            ${{ github.event.client_payload.slash_command.args.named.destroy != 'false' && format('- {0} Terraform Destroy', steps.destroy.outcome == 'success' && ':white_check_mark:' || ':x:') || '' }}
